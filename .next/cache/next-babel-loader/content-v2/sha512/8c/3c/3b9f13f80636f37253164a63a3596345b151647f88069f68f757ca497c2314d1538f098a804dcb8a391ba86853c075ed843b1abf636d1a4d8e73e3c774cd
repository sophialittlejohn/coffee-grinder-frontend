{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/sophia/projects/coffee-grinder-frontend/src/lib/userContext.tsx\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { destroyCookie } from \"nookies\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { USER_QUERY, UPDATE_USER } from \"./queries\";\nconst defaultUserContext = {\n  user: null,\n  updateUser: () => Promise.resolve()\n};\nconst UserContext = /*#__PURE__*/React.createContext(defaultUserContext);\nexport const ContextUser = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    data,\n    refetch\n  } = useQuery(USER_QUERY);\n  const [updateUserMutation, {\n    data: updatedUser\n  }] = useMutation(UPDATE_USER);\n\n  const logout = () => {\n    destroyCookie(null, \"token\");\n    setUser(null);\n  };\n\n  const updateUser = async value => {\n    try {\n      await updateUserMutation({\n        variables: value\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (data !== null && data !== void 0 && data.user && refetch) {\n      const {\n        user\n      } = data;\n      setUser(user);\n      refetch();\n    }\n\n    if (updatedUser && refetch) {\n      setUser(updatedUser.updateUser);\n      refetch();\n    }\n  }, [data, refetch, updatedUser]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      logout,\n      user,\n      setUser,\n      updateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\nexport const useUserContext = () => {\n  const context = useContext(UserContext);\n  return context;\n};","map":{"version":3,"sources":["/home/sophia/projects/coffee-grinder-frontend/src/lib/userContext.tsx"],"names":["useMutation","useQuery","destroyCookie","React","useContext","useEffect","useState","USER_QUERY","UPDATE_USER","defaultUserContext","user","updateUser","Promise","resolve","UserContext","createContext","ContextUser","children","setUser","data","refetch","updateUserMutation","updatedUser","logout","value","variables","error","Error","useUserContext","context"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,WAAxC;AAmBA,MAAMC,kBAA+B,GAAG;AACtCC,EAAAA,IAAI,EAAE,IADgC;AAEtCC,EAAAA,UAAU,EAAE,MAAMC,OAAO,CAACC,OAAR;AAFoB,CAAxC;AAKA,MAAMC,WAAW,gBAAGX,KAAK,CAACY,aAAN,CAAoBN,kBAApB,CAApB;AAEA,OAAO,MAAMO,WAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACrD,QAAM;AAAA,OAACP,IAAD;AAAA,OAAOQ;AAAP,MAAkBZ,QAAQ,CAAc,IAAd,CAAhC;AAEA,QAAM;AAAEa,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBnB,QAAQ,CAAiBM,UAAjB,CAAlC;AACA,QAAM,CAACc,kBAAD,EAAqB;AAAEF,IAAAA,IAAI,EAAEG;AAAR,GAArB,IAA8CtB,WAAW,CAACQ,WAAD,CAA/D;;AAEA,QAAMe,MAAM,GAAG,MAAM;AACnBrB,IAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAgB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,QAAMP,UAAU,GAAG,MAAOa,KAAP,IAA4B;AAC7C,QAAI;AACF,YAAMH,kBAAkB,CAAC;AAAEI,QAAAA,SAAS,EAAED;AAAb,OAAD,CAAxB;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACd,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,GAND;;AAQArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAI,SAAJ,IAAAA,IAAI,WAAJ,IAAAA,IAAI,CAAET,IAAN,IAAcU,OAAlB,EAA2B;AACzB,YAAM;AAAEV,QAAAA;AAAF,UAAWS,IAAjB;AACAD,MAAAA,OAAO,CAACR,IAAD,CAAP;AACAU,MAAAA,OAAO;AACR;;AAED,QAAIE,WAAW,IAAIF,OAAnB,EAA4B;AAC1BF,MAAAA,OAAO,CAACI,WAAW,CAACX,UAAb,CAAP;AACAS,MAAAA,OAAO;AACR;AACF,GAXQ,EAWN,CAACD,IAAD,EAAOC,OAAP,EAAgBE,WAAhB,CAXM,CAAT;AAaA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,MADK;AAELb,MAAAA,IAFK;AAGLQ,MAAAA,OAHK;AAILP,MAAAA;AAJK,KADT;AAAA,cAQGM;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA5CM;AA8CP,OAAO,MAAMW,cAAc,GAAG,MAAM;AAClC,QAAMC,OAAO,GAAGzB,UAAU,CAACU,WAAD,CAA1B;AACA,SAAOe,OAAP;AACD,CAHM","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport { destroyCookie } from \"nookies\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { CoffeeMachine } from \"../components/CoffeeMachine/types\";\nimport { USER_QUERY, UPDATE_USER } from \"./queries\";\n\nexport type User = {\n  id: number;\n  name: string;\n  email?: string;\n  coffeeMachines: CoffeeMachine[];\n  primaryMachine?: number;\n};\n\ntype UserValue = Partial<Record<keyof User, any>>;\n\ntype UserContext = {\n  user: null | User;\n  setUser?: React.Dispatch<React.SetStateAction<User | null>>;\n  logout?: () => void;\n  updateUser: (value: UserValue) => Promise<void>;\n};\n\nconst defaultUserContext: UserContext = {\n  user: null,\n  updateUser: () => Promise.resolve(),\n};\n\nconst UserContext = React.createContext(defaultUserContext);\n\nexport const ContextUser: React.FC = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const { data, refetch } = useQuery<{ user: User }>(USER_QUERY);\n  const [updateUserMutation, { data: updatedUser }] = useMutation(UPDATE_USER);\n\n  const logout = () => {\n    destroyCookie(null, \"token\");\n    setUser(null);\n  };\n\n  const updateUser = async (value: UserValue) => {\n    try {\n      await updateUserMutation({ variables: value });\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (data?.user && refetch) {\n      const { user } = data;\n      setUser(user);\n      refetch();\n    }\n\n    if (updatedUser && refetch) {\n      setUser(updatedUser.updateUser);\n      refetch();\n    }\n  }, [data, refetch, updatedUser]);\n\n  return (\n    <UserContext.Provider\n      value={{\n        logout,\n        user,\n        setUser,\n        updateUser,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUserContext = () => {\n  const context = useContext(UserContext);\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}
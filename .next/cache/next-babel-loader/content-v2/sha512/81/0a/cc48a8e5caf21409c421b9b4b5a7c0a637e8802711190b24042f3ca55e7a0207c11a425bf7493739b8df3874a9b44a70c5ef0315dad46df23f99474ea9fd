{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, ApolloLink, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { parseCookies } from \"nookies\";\nlet apolloClient;\n\nconst authLinkWithNextContext = context => new ApolloLink((operation, forward) => {\n  operation.setContext((_ref) => {\n    let {\n      headers\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"headers\"]);\n\n    const {\n      token\n    } = parseCookies(context);\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? `Bearer ${token}` : \"\"\n      })\n    };\n  });\n  return forward(operation);\n});\n\nconst httpLink = new HttpLink({\n  uri: \"https://coffee-grindr.herokuapp.com/\",\n  // Server URL (must be absolute)\n  credentials: \"same-origin\" // Additional fetch() options like `credentials` or `headers`\n\n});\n\nfunction createApolloClient(context) {\n  const authLink = authLinkWithNextContext(context);\n  return new ApolloClient({\n    ssrMode: true,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(context = null, initialState = null) {\n  var _apolloClient2;\n\n  const {\n    token\n  } = parseCookies(context);\n\n  if (!token && context !== null && context !== void 0 && context.res) {\n    context.res.writeHead(301, {\n      Location: \"/login\"\n    });\n    context.res.end();\n  }\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(context); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(null, initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/sophia/projects/coffee-grinder-frontend/src/lib/apolloClient.ts"],"names":["useMemo","ApolloClient","ApolloLink","HttpLink","InMemoryCache","parseCookies","apolloClient","authLinkWithNextContext","context","operation","forward","setContext","headers","rest","token","authorization","httpLink","uri","credentials","createApolloClient","authLink","ssrMode","link","concat","cache","initializeApollo","initialState","res","writeHead","Location","end","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,UAFF,EAIEC,QAJF,EAKEC,aALF,QAOO,gBAPP;AAQA,SAASC,YAAT,QAA6B,SAA7B;AAGA,IAAIC,YAAJ;;AAEA,MAAMC,uBAAuB,GAAIC,OAAD,IAC9B,IAAIN,UAAJ,CAAe,CAACO,SAAD,EAAYC,OAAZ,KAAwB;AACrCD,EAAAA,SAAS,CAACE,UAAV,CAAqB,UAAmC;AAAA,QAAlC;AAAEC,MAAAA;AAAF,KAAkC;AAAA,QAApBC,IAAoB;;AACtD,UAAM;AAAEC,MAAAA;AAAF,QAAYT,YAAY,CAACG,OAAD,CAA9B;AACA,WAAO;AACLI,MAAAA,OAAO,kCACFA,OADE;AAELG,QAAAA,aAAa,EAAED,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,KAAP;AAMD,GARD;AASA,SAAOJ,OAAO,CAACD,SAAD,CAAd;AACD,CAXD,CADF;;AAcA,MAAMO,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAC5Bc,EAAAA,GAAG,EAAE,sCADuB;AACiB;AAC7CC,EAAAA,WAAW,EAAE,aAFe,CAEA;;AAFA,CAAb,CAAjB;;AAKA,SAASC,kBAAT,CAA4BX,OAA5B,EAA6D;AAC3D,QAAMY,QAAQ,GAAGb,uBAAuB,CAACC,OAAD,CAAxC;AAEA,SAAO,IAAIP,YAAJ,CAAiB;AACtBoB,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAEF,QAAQ,CAACG,MAAT,CAAgBP,QAAhB,CAFgB;AAGtBQ,IAAAA,KAAK,EAAE,IAAIpB,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASqB,gBAAT,CACLjB,OAA+B,GAAG,IAD7B,EAELkB,YAAuB,GAAG,IAFrB,EAGL;AAAA;;AACA,QAAM;AAAEZ,IAAAA;AAAF,MAAYT,YAAY,CAACG,OAAD,CAA9B;;AACA,MAAI,CAACM,KAAD,IAAUN,OAAV,aAAUA,OAAV,eAAUA,OAAO,CAAEmB,GAAvB,EAA4B;AAC1BnB,IAAAA,OAAO,CAACmB,GAAR,CAAYC,SAAZ,CAAsB,GAAtB,EAA2B;AACzBC,MAAAA,QAAQ,EAAE;AADe,KAA3B;AAGArB,IAAAA,OAAO,CAACmB,GAAR,CAAYG,GAAZ;AACD;;AACD,QAAMC,aAAa,qBAAGzB,YAAH,2DAAmBa,kBAAkB,CAACX,OAAD,CAAxD,CARA,CAUA;AACA;;;AACA,MAAIkB,YAAJ,EAAkB;AAChB;AACA,UAAMM,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAGhB;AACA;;;AACAF,IAAAA,aAAa,CAACP,KAAd,CAAoBU,OAApB,iCAAiCF,aAAjC,GAAoDN,YAApD;AACD,GAlBD,CAmBA;;;AACA,YAAmC,OAAOK,aAAP,CApBnC,CAqBA;;AACA,MAAI,CAACzB,YAAL,EAAmBA,YAAY,GAAGyB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBT,YAAnB,EAAqC;AAC1C,QAAMU,KAAK,GAAGpC,OAAO,CAAC,MAAMyB,gBAAgB,CAAC,IAAD,EAAOC,YAAP,CAAvB,EAA6C,CAChEA,YADgE,CAA7C,CAArB;AAGA,SAAOU,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  ApolloClient,\n  ApolloLink,\n  from,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"@apollo/client\";\nimport { parseCookies } from \"nookies\";\nimport { NextPageContext } from \"next\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\nconst authLinkWithNextContext = (context: NextPageContext | null) =>\n  new ApolloLink((operation, forward) => {\n    operation.setContext(({ headers, ...rest }: Request) => {\n      const { token } = parseCookies(context);\n      return {\n        headers: {\n          ...headers,\n          authorization: token ? `Bearer ${token}` : \"\",\n        },\n      };\n    });\n    return forward(operation);\n  });\n\nconst httpLink = new HttpLink({\n  uri: \"https://coffee-grindr.herokuapp.com/\", // Server URL (must be absolute)\n  credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n});\n\nfunction createApolloClient(context: NextPageContext | null) {\n  const authLink = authLinkWithNextContext(context);\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(\n  context: NextPageContext | null = null,\n  initialState: null | {} = null\n) {\n  const { token } = parseCookies(context);\n  if (!token && context?.res) {\n    context.res.writeHead(301, {\n      Location: \"/login\",\n    });\n    context.res.end();\n  }\n  const _apolloClient = apolloClient ?? createApolloClient(context);\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...(initialState as {}) });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState: {}) {\n  const store = useMemo(() => initializeApollo(null, initialState), [\n    initialState,\n  ]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}